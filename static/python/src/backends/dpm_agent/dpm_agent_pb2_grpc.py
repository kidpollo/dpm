# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

# NB: This import must remain relative!
# Any change to an absolute import should be rejected.
from . import dpm_agent_pb2 as dpm__agent__pb2


class DpmAgentStub(object):
    """The `dpm-agent` service enables connecting to several cloud DB backends,
    compiling, and executing queries on these backends.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExecuteQuery = channel.unary_unary(
                '/dpm_agent.DpmAgent/ExecuteQuery',
                request_serializer=dpm__agent__pb2.Query.SerializeToString,
                response_deserializer=dpm__agent__pb2.QueryResult.FromString,
                )


class DpmAgentServicer(object):
    """The `dpm-agent` service enables connecting to several cloud DB backends,
    compiling, and executing queries on these backends.
    """

    def ExecuteQuery(self, request, context):
        """Execute a query on the selected backend.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DpmAgentServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ExecuteQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteQuery,
                    request_deserializer=dpm__agent__pb2.Query.FromString,
                    response_serializer=dpm__agent__pb2.QueryResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dpm_agent.DpmAgent', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DpmAgent(object):
    """The `dpm-agent` service enables connecting to several cloud DB backends,
    compiling, and executing queries on these backends.
    """

    @staticmethod
    def ExecuteQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dpm_agent.DpmAgent/ExecuteQuery',
            dpm__agent__pb2.Query.SerializeToString,
            dpm__agent__pb2.QueryResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
