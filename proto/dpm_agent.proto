syntax = "proto3";
package dpm_agent;

// The `dpm-agent` service enables connecting to several cloud DB backends,
// compiling, and executing queries on these backends.
service DpmAgent {
  // Execute a query on the selected backend.
  rpc ExecuteQuery(Query) returns (QueryResult) {}
}

// A Relational Query.
message Query {
  // The identifier used to fetch the configuration required to connect to the
  // cloud DB backend.
  Id id = 1;
  // The table name.
  string selectFrom = 2;
  // The selected columns.
  repeated SelectExpression select = 3;
  // A filter expression.
  optional BooleanExpression filter = 4;
  // Group-by.
  repeated GroupByExpression groupBy = 5;
  // Order-by.
  repeated OrderByExpression orderBy = 6;
  optional uint64 limit = 7;
  // Flag to indicate a dry-run. When set the query is only compiled but not
  // executed.
  optional bool dryRun = 8;
  // Caller's version info.
  optional ClientVersion clientVersion = 9;
  // Query type.
  optional Type type = 10;
  // Joins.
  repeated JoinExpression joins = 11;
  // Table alias.
  optional string tableAlias = 12;

  message Id {
    oneof id_type {
      // Package ID.
      string packageId = 1;
      // Source ID, used for introspection queries.
      string sourceId = 2;
    }
  }

  message SelectExpression {
    Expression argument = 1;
    optional string alias = 2;
  }

  // An expression captures the various forms in which a field
  // or the result of an operation on fields or literals are used
  // in a query.
  message Expression {
    oneof ex_type {
      FieldReference field = 1;
      Literal literal = 2;
      DerivedExpression derived = 3;
      AggregateExpression aggregate = 4;
      BooleanExpression condition = 5;
    }
  }

  message FieldReference {
    string fieldName = 1;
    // Name of the table containing the field.
    // Defaults to the table specified by `selectFrom`, when not set.
    optional string tableName = 2;
  }

  message Literal {
    oneof literal_type {
      string string = 1;
      bool boolean = 2;
      uint32 ui32 = 3;
      uint64 ui64 = 4;
      int32 i32 = 5;
      int64 i64 = 6;
      float f32 = 7;
      double f64 = 8;
      // Microseconds since Epoch (unix time).
      int64 timestamp = 9;
      List list = 10;
    }

    message List {
      repeated Literal values = 1;
    }
  }

  message DerivedExpression {
    ProjectionOperator op = 1;
    Expression argument = 2;

    enum ProjectionOperator {
      YEAR = 0;
      MONTH = 1;
      DAY = 2;
      HOUR = 3;
      MINUTE = 4;
      SECOND = 5;
      MILLISECOND = 6;
      DATE = 7;
      TIME = 8;
      WEEK = 9;
      DAY_OF_WEEK = 10;
      // The calendar date of the first day of the week.
      DATE_OF_WEEK = 11;
      // TODO: Add more.
    }
  }

  message AggregateExpression {
    AggregateOperator op = 1;
    Expression argument = 2;

    enum AggregateOperator {
      MIN = 0;
      MAX = 1;
      MEAN = 2;
      MEDIAN = 3;
      COUNT = 4;
      COUNT_DISTINCT = 5;
      SUM = 6;
      MEAN_DISTINCT = 7;
      // Other possible aggregators go here.
    }
  }

  message BooleanExpression {
    BooleanOperator op = 1;
    repeated Expression arguments = 2;

    enum BooleanOperator {
      AND = 0;
      OR = 1;
      EQ = 2;
      NEQ = 3;
      LT = 4;
      LTE = 5;
      GT = 6;
      GTE = 7;
      LIKE = 8;
      BETWEEN = 9;
      IN = 10;
      IS_NULL = 11;
      IS_NOT_NULL = 12;
      HAS_ANY = 13;
      HAS_ALL = 14;
    }
  }

  message GroupByExpression {
    oneof ex_type {
      FieldReference field = 1;
      DerivedExpression derived = 2;
    }
  }

  message OrderByExpression {
    Expression argument = 1;
    optional Direction direction = 2;

    enum Direction {
      ASC = 0;
      DESC = 1;
    }
  }

  enum Type {
    DATA = 0;
    INTROSPECTION = 1;
  }

  message JoinExpression {
    JoinType joinType = 1;
    // The name of the table on the right-side of the join. The left-side is
    // specified by the `selectFrom` field.
    string joinTable = 3;
    // A general join condition, but this should typically be an equi-join.
    BooleanExpression joinCondition = 4;
    // Table alias for joinTable.
    optional string tableAlias = 5;

    enum JoinType {
      LEFT_JOIN = 0;
      INNER_JOIN = 1;
      RIGHT_JOIN = 2;
      FULL_OUTER_JOIN = 3;
    }
  }
}

message QueryResult {
  // The compiled query string.
  string queryString = 1;
  // JSON-serialized result.
  string jsonData = 2;
}

// ClientVersion describes the type and semantic versions of the client
// that's making the call.
message ClientVersion {
  Client client = 1;
  // The dataset's semantic version. Set to non-empty SemVer string by generated
  // datapackage code only; client DPM will leave this field empty.
  string datasetVersion = 2;
  // The client code's semantic version.
  string codeVersion = 3;

  enum Client {
    DPM = 0;
    NODE_JS = 1;
    PYTHON = 2;
    CSHARP = 3;
  }
}
